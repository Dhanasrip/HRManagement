package com.excelr.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.Arrays;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .cors(cors -> cors.configurationSource(corsConfigurationSource()))
            .csrf(csrf -> csrf.disable())
            .authorizeHttpRequests(auth -> auth
                // Public endpoints
                .requestMatchers("/api/auth/**").permitAll()
                .requestMatchers("/swagger-ui/**", "/v3/api-docs/**").permitAll()
                .requestMatchers(HttpMethod.GET, "/api/employees/**").permitAll()
                .requestMatchers(HttpMethod.POST, "/api/employees").permitAll()
                .requestMatchers(HttpMethod.PUT, "/api/employees/**").permitAll()
                .requestMatchers(HttpMethod.DELETE, "/api/employees/**").permitAll()
                // Payroll endpoints
                .requestMatchers(HttpMethod.GET, "/api/payrolls/**").permitAll()
                .requestMatchers(HttpMethod.POST, "/api/payrolls").permitAll()
                
                // Attendance endpoints - modified patterns
                .requestMatchers(HttpMethod.POST, "/api/attendance").permitAll()
                .requestMatchers(HttpMethod.POST, "/api/attendance/*/checkin").permitAll()
                .requestMatchers(HttpMethod.POST, "/api/attendance/*/checkout").permitAll()
                .requestMatchers(HttpMethod.GET, "/api/attendance/**").permitAll()

                .requestMatchers(HttpMethod.DELETE, "/api/payrolls/**").permitAll()
                .requestMatchers(HttpMethod.POST, "/api/leaves").permitAll()
                .requestMatchers(HttpMethod.GET, "/api/leaves/**").permitAll()
                .requestMatchers(HttpMethod.GET, "/api/leaves/*/balance").permitAll()
                
                // HR-only endpoints
                .requestMatchers(HttpMethod.PUT, "/api/leaves/*/approve").permitAll()
                .requestMatchers(HttpMethod.PUT, "/api/leaves/*/reject").permitAll()
                
                // All other requests require authentication
                .anyRequest().authenticated()
            )
            .sessionManagement(session -> session
                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
            );
        
        return http.build();
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOrigins(Arrays.asList(
            "http://localhost:5173",
            "http://localhost:3000",
            "http://localhost:4200"
        ));
        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        configuration.setAllowedHeaders(Arrays.asList("*"));
        configuration.setAllowCredentials(true);
        configuration.setMaxAge(3600L);
        
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
        return config.getAuthenticationManager();
    }
}